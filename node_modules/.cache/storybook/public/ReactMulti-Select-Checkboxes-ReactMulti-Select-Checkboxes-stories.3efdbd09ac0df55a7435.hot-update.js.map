{"version":3,"file":"ReactMulti-Select-Checkboxes-ReactMulti-Select-Checkboxes-stories.3efdbd09ac0df55a7435.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAGA;AAAA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAIA;AAzHA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2HA;;;;;;;;;;;;;;AChIA;AACA;AAAA;AAAA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sources":["webpack://table---header-with-sub-header/./stories/ReactMulti-Select-Checkboxes/ReactMulti-Select-Checkboxes.js","webpack://table---header-with-sub-header/./stories/ReactMulti-Select-Checkboxes/keyboardNavigation.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport styles from \"./ReactMulti-Select-Checkboxes.module.css\";\nimport ariaAnnounce from \"./ariaAnnounce\";\nimport handleKeyboardNavigation from \"./keyboardNavigation\";\n\nconst ReactMultiSelectCheckboxes = () => {\n  const [expanded, setExpanded] = useState(false);\n  const [checkCount, setCheckCount] = useState(0);\n  const catBreedGroup = useRef(null);\n  const checkboxesRef = useRef([]);\n  const totalCheckboxes = 3;\n\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (\n        catBreedGroup.current &&\n        !catBreedGroup.current.contains(event.target)\n      ) {\n        setExpanded(false);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, []);\n\n  useEffect(() => {\n    checkboxesRef.current.forEach((checkbox) =>\n      checkbox.addEventListener(\"keydown\", onKeyDown)\n    );\n\n    return () => {\n      checkboxesRef.current.forEach((checkbox) =>\n        checkbox.removeEventListener(\"keydown\", onKeyDown)\n      );\n    };\n  }, []);\n\n  const toggleDisclosure = () => {\n    setExpanded(!expanded);\n  };\n\n  const updateCheckCount = (event) => {\n    const newCheckCount = event.target.checked\n      ? checkCount + 1\n      : checkCount - 1;\n    setCheckCount(newCheckCount);\n    ariaAnnounce(`${newCheckCount} of ${totalCheckboxes} checkboxes checked`);\n  };\n\n  const onKeyDown = (event) => {\n    handleKeyboardNavigation(event, checkboxesRef.current);\n  };\n\n  return (\n    <div className={styles.container}>\n      <button\n        type=\"button\"\n        aria-expanded={expanded}\n        onClick={toggleDisclosure}\n        aria-controls=\"CatBreedGroup\"\n        className={styles.button}\n      >\n        <span className={styles.icon}>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 80 80\"\n            focusable=\"false\"\n          >\n            <path d=\"M70.3 13.8L40 66.3 9.7 13.8z\"></path>\n          </svg>\n        </span>\n        Cat Breeds\n        <span className={styles.counter}>\n          ({checkCount} of {totalCheckboxes} selected)\n        </span>\n      </button>\n      <div\n        role=\"group\"\n        aria-labelledby=\"CatBreedGroupTrigger\"\n        id=\"CatBreedGroup\"\n        ref={catBreedGroup}\n        className={expanded ? styles.catBreedGroup : styles.hidden}\n      >\n        <ul>\n          <li>\n            <input\n              type=\"checkbox\"\n              name=\"catBreed\"\n              id=\"catBreed1\"\n              value=\"Bengal\"\n              onChange={updateCheckCount}\n              ref={(el) => (checkboxesRef.current[0] = el)}\n            />\n            <label htmlFor=\"catBreed1\">Bengal</label>\n          </li>\n          <li>\n            <input\n              type=\"checkbox\"\n              name=\"catBreed\"\n              id=\"catBreed2\"\n              value=\"Siamese\"\n              onChange={updateCheckCount}\n              ref={(el) => (checkboxesRef.current[1] = el)}\n            />\n            <label htmlFor=\"catBreed2\">Siamese</label>\n          </li>\n          <li>\n            <input\n              type=\"checkbox\"\n              name=\"catBreed\"\n              id=\"catBreed3\"\n          value=\"Maine Coon\"\n          onChange={updateCheckCount}\n          ref={(el) => (checkboxesRef.current[2] = el)}\n        />\n        <label htmlFor=\"catBreed3\">Maine Coon</label>\n      </li>\n    </ul>\n    {/* Add more cat breeds here */}\n  </div>\n</div>\n\n);\n};\n\nexport default ReactMultiSelectCheckboxes;","export const handleKeyboardNavigation = (event, checkboxes) => {\n    const { key } = event;\n    const currentIndex = checkboxes.findIndex(\n      (checkbox) => checkbox === event.target\n    );\n  \n    let newIndex = -1;\n  \n    if (key === \"ArrowDown\" || key === \"ArrowRight\") {\n      newIndex = currentIndex + 1;\n    } else if (key === \"ArrowUp\" || key === \"ArrowLeft\") {\n      newIndex = currentIndex - 1;\n    } else if (key === \"Home\") {\n      newIndex = 0;\n    } else if (key === \"End\") {\n      newIndex = checkboxes.length - 1;\n    }\n  \n    if (newIndex >= 0 && newIndex < checkboxes.length) {\n      event.preventDefault();\n      checkboxes[newIndex].focus();\n    }\n  };  "],"names":[],"sourceRoot":""}