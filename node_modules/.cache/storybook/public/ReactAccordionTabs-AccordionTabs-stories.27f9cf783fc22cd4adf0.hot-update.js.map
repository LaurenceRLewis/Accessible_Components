{"version":3,"file":"ReactAccordionTabs-AccordionTabs-stories.27f9cf783fc22cd4adf0.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAbA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAPA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AAGA;AAtDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://table---header-with-sub-header/./stories/ReactAccordionTabs/AccordionTabs.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport styles from \"./AccordionTabs.module.css\";\n\nconst AccordionButton = ({ id, title, isSelected, onClick, onKeyDown, textColor, tabBackground }) => (\n  <button\n    role=\"button\"\n    id={id}\n    aria-controls={`tabpanel-${id}`}\n    aria-expanded={isSelected}\n    onClick={() => onClick(id)}\n    onKeyDown={(event) => onKeyDown(id, event)}\n    style={{\n      color: textColor,\n      backgroundColor: isSelected ? tabBackground.selected : tabBackground.default,\n    }}\n  >\n    {title}\n  </button>\n);\n\nconst AccordionPanel = ({ id, isSelected, children }) => (\n  <div\n    role=\"region\"\n    id={`tabpanel-${id}`}\n    aria-labelledby={`${id}`}\n    hidden={!isSelected}\n  >\n    {children}\n  </div>\n);\n\nexport const AccordionTabComponent = ({\n  tabs,\n  triggerActivation = \"automated\",\n  textColor = \"rgba(0, 0, 0, 1)\",\n  tabBackground = {\n    default: \"rgba(209, 203, 219, 1)\",\n    selected: \"rgba(156, 39, 176, 1)\",\n  },\n}) => {\n  const [selectedTab, setSelectedTab] = useState(tabs[0].id);\n  const [isAccordionView, setIsAccordionView] = useState(window.innerWidth < 400);\n\n  const handleWindowResize = () => {\n    setIsAccordionView(window.innerWidth < 400);\n  };\n\n  const windowResizeEvent = useRef(null);\n\n  useEffect(() => {\n    windowResizeEvent.current = handleWindowResize;\n    window.addEventListener(\"resize\", windowResizeEvent.current);\n\n    return () => {\n      window.removeEventListener(\"resize\", windowResizeEvent.current);\n    };\n  }, []);\n\n  const handleKeyDown = (id, event) => {\n    if (event.key === \"Enter\" || event.key === \" \") {\n      event.preventDefault();\n      setSelectedTab(id);\n    }\n  };\n\n  return (\n    <div className={styles.tabContainer}>\n      {tabs.map(({ id, title, content }) => (\n        <div key={id}>\n          <AccordionButton\n            id={id}\n            title={title}\n            isSelected={selectedTab === id}\n            onClick={() => setSelectedTab(id)}\n            onKeyDown={handleKeyDown}\n            textColor={textColor}\n            tabBackground={tabBackground}\n          />\n          <AccordionPanel id={id} isSelected={selectedTab === id}>\n            {content}\n          </AccordionPanel>\n        </div>\n      ))}\n    </div>\n  );\n};\n"],"names":[],"sourceRoot":""}