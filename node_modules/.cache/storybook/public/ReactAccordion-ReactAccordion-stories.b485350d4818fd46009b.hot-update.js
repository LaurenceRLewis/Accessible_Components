"use strict";
self["webpackHotUpdatetable_header_with_sub_header"]("ReactAccordion-ReactAccordion-stories",{

/***/ "./stories/ReactAccordion/ReactAccordion.stories.js":
/*!**********************************************************!*\
  !*** ./stories/ReactAccordion/ReactAccordion.stories.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Cats": () => (/* binding */ Cats),
/* harmony export */   "Dogs": () => (/* binding */ Dogs),
/* harmony export */   "Horses": () => (/* binding */ Horses),
/* harmony export */   "__namedExportsOrder": () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ReactAccordion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ReactAccordion */ "./stories/ReactAccordion/ReactAccordion.js");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");




/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  title: "Components/ReactAccordion",
  component: _ReactAccordion__WEBPACK_IMPORTED_MODULE_1__["default"],
  argTypes: {
    multiExpand: {
      control: "boolean",
      description: "Allow multiple accordions to be open at once",
      defaultValue: false
    },
    items: {
      table: {
        disable: true
      }
    },
    NamedRegionContainer: {
      control: {
        type: "select"
      },
      options: ["Contained in a named landmark region", "Not contained in a named landmark region"],
      defaultValue: "Contained in a named landmark region"
    },
    groupName: {
      table: {
        disable: true
      }
    }
  }
});
const Template = args => {
  const isNamedRegion = args.NamedRegionContainer === "Contained in a named landmark region";
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
    ...(isNamedRegion ? {
      role: "region",
      "aria-label": `Accordion group for ${args.groupName}`
    } : {}),
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("h2", {
      id: `${args.groupName}-heading`,
      children: args.groupName.charAt(0).toUpperCase() + args.groupName.slice(1)
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_ReactAccordion__WEBPACK_IMPORTED_MODULE_1__["default"], {
      ...args
    })]
  });
};
Template.displayName = "Template";
const Cats = Template.bind({});
const Dogs = Template.bind({});
const Horses = Template.bind({});
Cats.args = {
  items: [{
    title: "Persian",
    content: "Persian cats are known for their long, luxurious fur and flat faces."
  }, {
    title: "Siamese",
    content: "Siamese cats have sleek, short coats and striking blue almond-shaped eyes."
  }, {
    title: "Maine Coon",
    content: "Maine Coon cats are large, friendly cats with tufted ears and bushy tails."
  }, {
    title: "Bengal",
    content: "Bengal cats are known for their wild appearance and energetic nature."
  }],
  groupName: "cats",
  multiExpand: false,
  NamedRegionContainer: "Contained in a named landmark region"
};
Dogs.args = {
  items: [{
    title: "Golden Retriever",
    content: "Golden Retrievers are friendly, intelligent, and devoted."
  }, {
    title: "Labrador Retriever",
    content: "Labrador Retrievers are friendly, active, and outgoing."
  }, {
    title: "German Shepherd",
    content: "German Shepherds are confident, courageous, and smart."
  }, {
    title: "Bulldog",
    content: "Bulldogs are friendly, courageous, and calm."
  }],
  groupName: "dogs",
  multiExpand: true,
  NamedRegionContainer: "Not contained in a named landmark region"
};
Cats.parameters = {
  ...Cats.parameters,
  docs: {
    ...Cats.parameters?.docs,
    source: {
      originalSource: "args => {\n  const isNamedRegion = args.NamedRegionContainer === \"Contained in a named landmark region\";\n  return <div {...isNamedRegion ? {\n    role: \"region\",\n    \"aria-label\": `Accordion group for ${args.groupName}`\n  } : {}}>\n      <h2 id={`${args.groupName}-heading`}>\n        {args.groupName.charAt(0).toUpperCase() + args.groupName.slice(1)}\n      </h2>\n      <Accordion {...args} />\n    </div>;\n}",
      ...Cats.parameters?.docs?.source
    }
  }
};
Dogs.parameters = {
  ...Dogs.parameters,
  docs: {
    ...Dogs.parameters?.docs,
    source: {
      originalSource: "args => {\n  const isNamedRegion = args.NamedRegionContainer === \"Contained in a named landmark region\";\n  return <div {...isNamedRegion ? {\n    role: \"region\",\n    \"aria-label\": `Accordion group for ${args.groupName}`\n  } : {}}>\n      <h2 id={`${args.groupName}-heading`}>\n        {args.groupName.charAt(0).toUpperCase() + args.groupName.slice(1)}\n      </h2>\n      <Accordion {...args} />\n    </div>;\n}",
      ...Dogs.parameters?.docs?.source
    }
  }
};
Horses.parameters = {
  ...Horses.parameters,
  docs: {
    ...Horses.parameters?.docs,
    source: {
      originalSource: "args => {\n  const isNamedRegion = args.NamedRegionContainer === \"Contained in a named landmark region\";\n  return <div {...isNamedRegion ? {\n    role: \"region\",\n    \"aria-label\": `Accordion group for ${args.groupName}`\n  } : {}}>\n      <h2 id={`${args.groupName}-heading`}>\n        {args.groupName.charAt(0).toUpperCase() + args.groupName.slice(1)}\n      </h2>\n      <Accordion {...args} />\n    </div>;\n}",
      ...Horses.parameters?.docs?.source
    }
  }
};
const __namedExportsOrder = ["Cats", "Dogs", "Horses"];

/***/ })

});