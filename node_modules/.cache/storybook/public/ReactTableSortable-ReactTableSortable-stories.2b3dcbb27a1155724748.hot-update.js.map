{"version":3,"file":"ReactTableSortable-ReactTableSortable-stories.2b3dcbb27a1155724748.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAyDA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AAcA;AAAA;AAGA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAGA;AAOA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AAGA;AA/JA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiKA","sources":["webpack://table---header-with-sub-header/./stories/ReactTableSortable/ReactTableSortable.js"],"sourcesContent":["//ReactTableSortable.js\nimport React, { useState, useCallback } from 'react';\nimport './styles.css';\n\nexport const ReactTableSortable = () => {\n    // Initialize tableData with initial data.\n    const [tableData, setTableData] = useState([\n      [\n        \"P4\",\n        \"TNC000131015\",\n        \"Alok Nagar\",\n        \"Infrastructure Upgrade\",\n        \"In Progress\",\n        \"Chennai\",\n        \"Sampark Technologies\",\n        \"30 Aug 2022 10am\",\n        \"Rahul Varma\"\n      ],\n      [\n        \"P3\",\n        \"TNC000119453\",\n        \"Pratap Enclave\",\n        \"Network Expansion\",\n        \"Completed\",\n        \"Kolkata\",\n        \"FastNet Communications\",\n        \"13 Jul 2022 3pm\",\n        \"Aditi Chatterjee\"\n      ],\n      [\n        \"P2\",\n        \"TNC000254981\",\n        \"Kima\",\n        \"Database migration\",\n        \"In Progress\",\n        \"London\",\n        \"Michael Brown\",\n        \"18 Oct 2022 9am\",\n        \"David Johnson\"\n      ],\n      [\n        \"P1\",\n        \"TNC000325789\",\n        \"Zara\",\n        \"Frontend refactoring\",\n        \"Not Started\",\n        \"Tokyo\",\n        \"Lisa White\",\n        \"10 Nov 2022 11am\",\n        \"Emily Green\"\n      ],\n      [\n        \"P4\",\n        \"TNC000411568\",\n        \"Xeno\",\n        \"Backend integration\",\n        \"Completed\",\n        \"Sydney\",\n        \"Robert Taylor\",\n        \"22 Dec 2022 3pm\",\n        \"William Wilson\"\n      ]\n    ]);\n    // Initialize sortedColumn state with a default sorting configuration.\n    const [sortedColumn, setSortedColumn] = useState({\n      index: null,\n      ascending: true\n    });\n    const [showChevron, setShowChevron] = useState(null);\n  \n    // Helper function to get cell value at given row and idx.\n    const getCellValue = (row, idx) => row[idx];\n    // Function factory to generate a comparer function for sorting table data.\n    const comparer = (idx, asc) => (a, b) =>\n      ((v1, v2) =>\n        v1 !== \"\" && v2 !== \"\" && !isNaN(v1) && !isNaN(v2)\n          ? v1 - v2\n          : v1.toString().localeCompare(v2))(\n        getCellValue(asc ? a : b, idx),\n        getCellValue(asc ? b : a, idx)\n      );\n      \n      // Function wrapped in useCallback that handles header button click to sort table.\n      const onHeaderButtonClick = useCallback(\n        (index) => {\n          if (sortable === \"Sort\") {\n            // Update sortedColumn state and sort tableData based on new sorting configuration.\n            setSortedColumn((prevSortedColumn) => {\n              // Logic to determine if the same column is clicked or a different one.\n              const isSameColumn = prevSortedColumn.index === index;\n              const ascending = isSameColumn ? !prevSortedColumn.ascending : true;\n              setTableData((prevData) =>\n                [...prevData].sort(comparer(index, ascending))\n              );\n              return { index, ascending };\n            });\n          }\n        },\n        [sortable]\n      );\n  \n    // Render table with sortedColumn state and onHeaderButtonClick event handler.\n    return (\n      <table>\n        <thead>\n          <tr>\n            {[\n              \"Priority\",\n              \"Number\",\n              \"Your reference\",\n              \"Brief summary\",\n              \"Status\",\n              \"Location\",\n              \"Assigned to\",\n              \"Estimated resolution\",\n              \"Raised by\"\n            ].map((header, index) => (\n              <th\n                key={header}\n                id={`${header.replace(/\\s+/g, \"-\").toLowerCase()}-${index}`}\n                {...(sortedColumn.index === index\n                  ? {\n                      \"aria-sort\": sortedColumn.ascending\n                        ? \"ascending\"\n                        : \"descending\"\n                    }\n                  : {})}\n              >\n                <button\n                  onMouseEnter={() => setShowChevron(index)}\n                  onMouseLeave={() => setShowChevron(null)}\n                  onFocus={() => setShowChevron(index)}\n                  onBlur={() => setShowChevron(null)}\n                  onClick={() => onHeaderButtonClick(index)}\n                >\n                  <span className=\"sr-only\">Sort by: </span>\n                  {header}\n                  <span\n                    className={`chevron ${\n                      showChevron === index || sortedColumn.index === index\n                        ? sortedColumn.index === index && sortedColumn.ascending\n                          ? \"up\"\n                          : \"down\"\n                        : \"hidden\"\n                    }`}\n                    aria-hidden=\"true\"\n                  />\n                </button>\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {tableData.map((row, rowIndex) => (\n            <tr key={rowIndex}>\n              {row.map((cell, cellIndex) => (\n                <td key={cellIndex}>{cell}</td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  };\n\n  export default ReactTableSortable;"],"names":[],"sourceRoot":""}