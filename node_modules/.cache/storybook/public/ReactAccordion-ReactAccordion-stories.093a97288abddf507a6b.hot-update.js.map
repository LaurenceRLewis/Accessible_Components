{"version":3,"file":"ReactAccordion-ReactAccordion-stories.093a97288abddf507a6b.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AACA;AACA;;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAFA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAFA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAGA;AAEA;AAAA;AAAA;AAAA;AACA;AA/EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiFA","sources":["webpack://table---header-with-sub-header/./stories/ReactAccordion/ReactAccordion.js"],"sourcesContent":["\nimport React, { useState } from \"react\";\nimport \"./styles.css\";\n\n// Define ChevronUp SVG icon component\nconst ChevronUp = () => (\n    <svg aria-hidden=\"true\" viewBox=\"0 0 20 20\" width=\"20\" height=\"20\">\n      <path d=\"M5 8l5 5 5-5H5z\" fill=\"currentColor\" />\n    </svg>\n  );\n\n// Define ChevronDown SVG icon component\nconst ChevronDown = () => (\n    <svg aria-hidden=\"true\" viewBox=\"0 0 20 20\" width=\"20\" height=\"20\">\n      <path d=\"M5 12l5-5 5 5H5z\" fill=\"currentColor\" />\n    </svg>\n  );\n\n// Define ChevronDown SVG icon component\nconst Accordion = ({ items, groupName, multiExpand }) => {\n    const [activeIndices, setActiveIndices] = useState([]);\n    \n    // Handle title click event\n    const onTitleClick = (index) => {\n      if (multiExpand) {\n        setActiveIndices((prevIndices) =>\n          prevIndices.includes(index)\n            ? prevIndices.filter((i) => i !== index)\n            : [...prevIndices, index]\n        );\n      } else {\n        setActiveIndices(index === activeIndices[0] ? [] : [index]);\n      }\n    };\n  \n    // Handle title keydown event\n    const onTitleKeyDown = (event, index) => {\n      const key = event.key;\n  \n      if (key === \"Enter\" || key === \" \") {\n        onTitleClick(index);\n        event.preventDefault();\n      } else if (key === \"ArrowDown\" || key === \"ArrowUp\") {\n        const newIndex =\n          key === \"ArrowDown\"\n            ? (index + 1) % items.length\n            : (index - 1 + items.length) % items.length;\n        const newButton = document.getElementById(\n          `${groupName}-heading-${newIndex}`\n        );\n        newButton.focus();\n        event.preventDefault();\n      } else if (key === \"Home\") {\n        const firstButton = document.getElementById(`${groupName}-heading-0`);\n        firstButton.focus();\n        event.preventDefault();\n      } else if (key === \"End\") {\n        const lastButton = document.getElementById(\n          `${groupName}-heading-${items.length - 1}`\n        );\n        lastButton.focus();\n        event.preventDefault();\n      }\n    };\n  \n    // Render accordion items\n    const renderedItems = items.map((item, index) => {\n      const active = activeIndices.includes(index) ? \"active\" : \"\";\n  \n      // Return accordion markup\n      return (\n        <React.Fragment key={item.title}>\n          <h3>\n            <button\n              className={`title ${active}`}\n              onClick={() => onTitleClick(index)}\n              onKeyDown={(event) => onTitleKeyDown(event, index)}\n              id={`${groupName}-heading-${index}`}\n              aria-controls={`${groupName}-panel-${index}`}\n              aria-expanded={active === \"active\"}\n            >\n              <span>{item.title}</span>\n              {active ? <ChevronDown /> : <ChevronUp />}\n            </button>\n          </h3>\n          <div\n            className={`content ${active}`}\n            id={`${groupName}-panel-${index}`}\n            aria-labelledby={`${groupName}-heading-${index}`}\n            hidden={active !== \"active\"}\n          >\n            <p>{item.content}</p>\n          </div>\n        </React.Fragment>\n      );\n    });\n  \n    return <div className=\"ui styled accordion\">{renderedItems}</div>;\n  };\n\nexport default Accordion;\n"],"names":[],"sourceRoot":""}