{"version":3,"file":"ReactAccordionTabs-AccordionTabs-stories.517ee944f6e1fe7bd2d7.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAbA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAPA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAdA;AAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AARA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AAEA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AAEA;AAEA;AAGA;AA5FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://table---header-with-sub-header/./stories/ReactAccordionTabs/AccordionTabs.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport styles from \"./TabComponent.module.css\";\n\nconst AccordionButton = ({ id, title, isSelected, onClick, onKeyDown, textColor, tabBackground }) => (\n  <button\n    role=\"button\"\n    id={id}\n    aria-controls={`tabpanel-${id}`}\n    aria-expanded={isSelected}\n    onClick={() => onClick(id)}\n    onKeyDown={(event) => onKeyDown(id, event)}\n    style={{\n      color: textColor,\n      backgroundColor: isSelected ? tabBackground.selected : tabBackground.default,\n    }}\n  >\n    {title}\n  </button>\n);\n\nconst AccordionPanel = ({ id, isSelected, children }) => (\n  <div\n    role=\"region\"\n    id={`tabpanel-${id}`}\n    aria-labelledby={`${id}`}\n    hidden={!isSelected}\n  >\n    {children}\n  </div>\n);\n\nconst Tab = ({ id, title, isSelected, onClick, onKeyDown, textColor, tabBackground }) => (\n  <button\n    role=\"tab\"\n    id={id}\n    aria-controls={`tabpanel-${id}`}\n    aria-selected={isSelected}\n    onClick={() => onClick(id)}\n    onKeyDown={(event) => onKeyDown(id, event)}\n    tabIndex={isSelected ? 0 : -1}\n    style={{\n      color: textColor,\n      backgroundColor: isSelected ? tabBackground.selected : tabBackground.default,\n    }}\n  >\n    {title}\n  </button>\n);\n\nconst TabPanel = ({ id, isSelected, children, tabIndex }) => (\n  <div\n    role=\"tabpanel\"\n    id={`tabpanel-${id}`}\n    aria-labelledby={`${id}`}\n    hidden={!isSelected}\n    tabIndex={tabIndex}\n  >\n    {children}\n  </div>\n);\n\nexport const TabComponent = ({\n  tabs,\n  tabPanelTabindex,\n  triggerActivation = \"automated\",\n  textColor = \"rgba(0, 0, 0, 1)\",\n  tabBackground = {\n    default: \"rgba(209, 203, 219, 1)\",\n    selected: \"rgba(156, 39, 176, 1)\",\n  },\n}) => {\n  const [selectedTab, setSelectedTab] = useState(tabs[0].id);\n  const [isAccordionView, setIsAccordionView] = useState(window.innerWidth < 400);\n\n  const handleWindowResize = () => {\n    setIsAccordionView(window.innerWidth < 400);\n  };\n\n  const windowResizeEvent = useRef(null);\n\n  useEffect(() => {\n    windowResizeEvent.current = handleWindowResize;\n    window.addEventListener(\"resize\", windowResizeEvent.current);\n\n    return () => {\n      window.removeEventListener(\"resize\", windowResizeEvent.current);\n    };\n  }, []);\n\n  const handleKeyDown = (id, event) => {\n    if (isAccordionView && (event.key === \"Enter\" || event.key === \" \")) {\n      event.preventDefault();\n      setSelectedTab(id);\n    } else if (!isAccordionView) {\n      const currentIndex = tabs.findIndex((tab) => tab.id === id);\n\n      // Remaining key event handling for Tab component\n    }\n  };\n\n  return (\n    <div className={styles.tabContainer}>\n      {isAccordionView ? (\n        tabs.map(({ id, title, content }) => (\n          <div key={id}>\n            <AccordionButton\n              id={id}\n              title={title}\n              isSelected={selectedTab === id}\n              onClick={() => setSelectedTab(id)}\n              onKeyDown={handleKeyDown}\n              textColor={textColor}\n              tabBackground={tabBackground}\n            />\n            <AccordionPanel\nkey={id}\nid={id}\nisSelected={selectedTab === id}\n>\n{content}\n</AccordionPanel>\n</div>\n))\n) : (\n<>\n<div role=\"tablist\" aria-label=\"HTML and ARIA information\" className={styles.tabList}>\n{tabs.map(({ id, title }) => (\n<Tab\nkey={id}\nid={id}\ntitle={title}\nisSelected={selectedTab === id}\nonClick={() => setSelectedTab(id)}\nonKeyDown={handleKeyDown}\ntextColor={textColor}\ntabBackground={tabBackground}\n/>\n))}\n</div>\n{tabs.map(({ id, content }) => (\n<TabPanel\nkey={id}\nid={id}\nisSelected={selectedTab === id}\ntabIndex={tabPanelTabindex ? 0 : undefined}\n>\n{content}\n</TabPanel>\n))}\n</>\n)}\n</div>\n);\n};\n"],"names":[],"sourceRoot":""}