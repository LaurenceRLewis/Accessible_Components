{"version":3,"file":"ReactSheetDialog-ReactSheetDialog-stories.3e010404cfe09e18fa13.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AACA;AAKA;AACA;AAAA;AACA;AAOA;AACA;AAAA;AACA;AAOA;AAAA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA","sources":["webpack://table---header-with-sub-header/./stories/ReactSheetDialog/ReactSheetDialog.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport classNames from \"classnames\";\nimport styles from \"./ReactSheet.module.css\";\n\nfunction ReactSheetDialog(props) {\n  // Declare state variable for sheet/dialog open state\n  const [open, setOpen] = useState(false);\n  // Destructure the modal and dialogType props\n  const { modal, dialogType } = props;\n\n  // Function to open the sheet/dialog\n  const openSheet = () => {\n    setOpen(true);\n  };\n\n  // Function to close the sheet/dialog\n  const closeSheet = () => {\n    setOpen(false);\n  };\n\n  // Function to handle the Esc key press event\n  const handleEscKey = (event) => {\n    if (event.key === \"Escape\" && open && modal) {\n      closeSheet();\n    }\n  };\n\n  // Add event listener for keydown events to handle Esc key press\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleEscKey);\n    return () => {\n      window.removeEventListener(\"keydown\", handleEscKey);\n    };\n  }, [handleEscKey]);\n\n  // Set focus on the sheet heading when the sheet/dialog opens\n  useEffect(() => {\n    if (open) {\n      document.getElementById(\"sheet-heading\").focus();\n    }\n  }, [open]);\n\n  // Function to trap focus within the sheet/dialog when modal\n  const trapFocus = (event) => {\n    if (!open || !modal) {\n      return;\n    }\n    const isTabPressed = event.key === \"Tab\" || event.keyCode === 9;\n\n    if (!isTabPressed) {\n      return;\n    }\n\n    const trapEl =\n      'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])';\n    const trapContent = document.querySelectorAll(trapEl);\n    const firstTrapEl = trapContent[0];\n    const lastTrapEl = trapContent[trapContent.length - 1];\n\n    if (event.shiftKey) {\n      if (document.activeElement === firstTrapEl) {\n        lastTrapEl.focus();\n        event.preventDefault();\n      }\n    } else {\n      if (document.activeElement === lastTrapEl) {\n        firstTrapEl.focus();\n        event.preventDefault();\n      }\n    }\n\n    if (!document.getElementById(\"sheet-heading\").contains(event.target)) {\n      event.stopPropagation();\n      document.getElementById(\"sheet-heading\").focus();\n    }\n  };\n\n  // Check if the dialogType is \"standard\"\n  const isStandardDialog = dialogType === \"standard\";\n  // Determine the sheet class based on the open state\n  const sheetClass = open ? styles.open : \"\";\n  // Determine if the overlay should be displayed\n  const overlayClass = open && modal;\n  // Combine sheet classes based on the dialog type\n  const sheetStyle = classNames(styles.sheet, sheetClass, {\n    [styles.standardDialog]: isStandardDialog,\n  });\n\n  return (\n    <>\n      <button\n        onClick={openSheet}\n        id=\"side-sheet-button\"\n        className={styles.sideSheetButton}\n      >\n        Open Sheet\n      </button>\n      {overlayClass && <div className={styles.overlay}></div>}\n      <div\n        className={sheetStyle}\n        role=\"dialog\"\n        aria-labelledby=\"sheet-heading\"\n        {...(modal ? { \"aria-modal\": true } : {})}\n        aria-hidden={!open}\n        onKeyDown={(event) => {\n          trapFocus(event);\n        }}\n      >\n        <div className={styles.sheetHeader}>\n          <h2 id=\"sheet-heading\" className={styles.sheetHeading} tabIndex=\"-1\">\n            Sheet Dialog\n          </h2>\n          <button className={styles.closeButton} onClick={closeSheet}>\n            <svg\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                d=\"M6 18L18 6M6 6L18 18\"\n                stroke=\"#7B61C4\"\n                strokeWidth=\"2\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n              />\n            </svg>\n          </button>\n        </div>\n        <div className={styles.sheetContent}>\n          <h3>Control Props</h3>\n          <p>\n            This component has two control props: <code>modal</code> and{\" \"}\n            <code>dialogType</code>.\n          </p>\n          <ul>\n            <li>\n              <code>modal</code>: Determines if the sheet/dialog\n            </li>\n            <li>\n              <code>dialogType</code>: Defines the type of dialog to display,\n              either \"sheet\" or \"standard\". It accepts a string value (default:\n              \"sheet\").\n            </li>\n          </ul>\n          <h3>When to Use Sheet and Standard Dialogs</h3>\n          <p>\n            Both sheet and standard dialogs can be used to display additional\n            content, prompt user input, or present options in a separate layer.\n            However, they serve different purposes based on the context and user\n            experience you want to achieve.\n          </p>\n          <h4>Sheet Dialog</h4>\n          <p>\n            Sheet dialogs are ideal for displaying content or actions related to\n            the current context or page. They usually slide in from the edge of\n            the screen and cover only a portion of the content, allowing the\n            user to maintain a connection with the underlying page. Sheet\n            dialogs are typically used for navigation menus, filters, or\n            contextual actions on larger screens.\n          </p>\n          <h4>Standard Dialog</h4>\n          <p>\n            Standard dialogs are used to display more critical information,\n            prompt user input, or present actions that require the user's full\n            attention. They usually appear in the center of the screen, with a\n            backdrop that prevents interaction with the content underneath. Use\n            standard dialogs for confirmation dialogs, user input forms, or when\n            the user must complete an action before proceeding.\n          </p>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default ReactSheetDialog;\n"],"names":[],"sourceRoot":""}