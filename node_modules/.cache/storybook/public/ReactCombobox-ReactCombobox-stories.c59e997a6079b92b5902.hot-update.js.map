{"version":3,"file":"ReactCombobox-ReactCombobox-stories.c59e997a6079b92b5902.hot-update.js","mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AAAA;AAEA;AAEA;AAGA;AAAA;AAAA;AAAA;AAGA;AAvEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyEA","sources":["webpack://table---header-with-sub-header/./.storybook/utils/ariaAnnounce.js","webpack://table---header-with-sub-header/./stories/ReactCombobox/ReactCombobox.js"],"sourcesContent":["const ariaAnnounce = (message) => {\n  const liveRegion = document.createElement(\"div\");\n  liveRegion.style.position = \"absolute\";\n  liveRegion.style.width = \"1px\";\n  liveRegion.style.height = \"1px\";\n  liveRegion.style.marginTop = \"-1px\";\n  liveRegion.style.clip = \"rect(1px, 1px, 1px, 1px)\";\n  liveRegion.style.overflow = \"hidden\";\n  liveRegion.setAttribute(\"aria-live\", \"assertive\");\n  liveRegion.setAttribute(\"aria-atomic\", \"true\");\n  liveRegion.setAttribute(\"role\", \"status\");\n\n  document.body.appendChild(liveRegion);\n\n  setTimeout(() => {\n    liveRegion.innerText = message;\n  }, 50);\n\n  setTimeout(() => {\n    document.body.removeChild(liveRegion);\n  }, 7000);\n};\n\nexport default ariaAnnounce;\n","import React, { useState, useRef } from 'react';\nimport ariaAnnounce from '../../.storybook/utils/ariaAnnounce';\nimport { townsAndCities } from './ReactComboboxData';\n\nconst ReactCombobox = ({autocomplete}) => {\n  const [inputValue, setInputValue] = useState(\"\");\n  const [selectedIndex, setSelectedIndex] = useState(-1);\n  const [showOptions, setShowOptions] = useState(false);\n  const inputRef = useRef(null);\n\n  const filteredOptions = townsAndCities.filter(\n    town => town.toLowerCase().startsWith(inputValue.toLowerCase())\n  );\n\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n    setSelectedIndex(-1);\n    setShowOptions(true);\n  };\n\n  const handleOptionClick = (value) => {\n    setInputValue(value);\n    setShowOptions(false);\n    setSelectedIndex(-1);\n    ariaAnnounce(`Selected ${value}`);\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === \"ArrowDown\" && selectedIndex < filteredOptions.length - 1) {\n      setSelectedIndex(selectedIndex + 1);\n      setInputValue(filteredOptions[selectedIndex + 1]);\n    } else if (e.key === \"ArrowUp\" && selectedIndex > 0) {\n      setSelectedIndex(selectedIndex - 1);\n      setInputValue(filteredOptions[selectedIndex - 1]);\n    } else if (e.key === \"Enter\") {\n      setShowOptions(false);\n    }\n  };\n\n  return (\n    <div>\n      <label id=\"combobox-label\" htmlFor=\"combobox-input\">Your City or Town</label>\n      <input\n        id=\"combobox-input\"\n        role=\"combobox\"\n        aria-autocomplete={autocomplete}\n        aria-controls=\"combobox-listbox\"\n        aria-activedescendant={selectedIndex === -1 ? '' : `option-${selectedIndex}`}\n        aria-expanded={showOptions}\n        aria-haspopup=\"listbox\"\n        aria-labelledby=\"combobox-label\"\n        ref={inputRef}\n        type=\"text\"\n        value={inputValue}\n        onChange={handleInputChange}\n        onKeyDown={handleKeyPress}\n      />\n      {showOptions && (\n        <ul id=\"combobox-listbox\" role=\"listbox\">\n          {filteredOptions.map((option, index) => (\n            <li\n              id={`option-${index}`}\n              key={option}\n              role=\"option\"\n              aria-selected={index === selectedIndex}\n              onClick={() => handleOptionClick(option)}\n            >\n              {option}\n            </li>\n          ))}\n        </ul>\n      )}\n      <p id=\"help-text\">Add instruction here</p>\n    </div>\n  );\n};\n\nexport default ReactCombobox;"],"names":[],"sourceRoot":""}