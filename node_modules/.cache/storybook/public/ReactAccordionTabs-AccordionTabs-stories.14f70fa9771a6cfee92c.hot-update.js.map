{"version":3,"file":"ReactAccordionTabs-AccordionTabs-stories.14f70fa9771a6cfee92c.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAEA;AAvBA;AA2BA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AARA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAEA;AAxBA;AA4BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AATA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AAEA;AAEA;AAGA;AAhIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://table---header-with-sub-header/./stories/ReactAccordionTabs/AccordionTabs.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport styles from \"./AccordionTabs.module.css\";\n\nconst AccordionButton = ({\n  id,\n  title,\n  isSelected,\n  onClick,\n  onKeyDown,\n  textColor,\n  tabBackground,\n}) => (\n  <button\n    id={id}\n    className=\"accordionButton\"\n    aria-controls={`tabpanel-${id}`}\n    aria-expanded={isSelected}\n    onClick={() => onClick(id)}\n    onKeyDown={(event) => onKeyDown(id, event)}\n    style={{\n      color: textColor,\n      backgroundColor: isSelected\n        ? tabBackground.selected\n        : tabBackground.default,\n    }}\n  >\n    {title}\n  </button>\n);\n\nconst AccordionPanel = ({ id, isSelected, children }) => (\n    <div\n      role=\"region\"\n      id={`tabpanel-${id}`}\n      aria-labelledby={`${id}`}\n      className={isSelected ? styles.accordionTabPanel : \"\"}\n      hidden={!isSelected}\n    >\n      {children}\n    </div>\n  );\n\nconst Tab = ({\n  id,\n  title,\n  isSelected,\n  onClick,\n  onKeyDown,\n  textColor,\n  tabBackground,\n}) => (\n  <button\n    role=\"tab\"\n    id={id}\n    aria-controls={`tabpanel-${id}`}\n    aria-selected={isSelected}\n    onClick={() => onClick(id)}\n    onKeyDown={(event) => onKeyDown(id, event)}\n    tabIndex={isSelected ? 0 : -1}\n    style={{\n      color: textColor,\n      backgroundColor: isSelected\n        ? tabBackground.selected\n        : tabBackground.default,\n    }}\n  >\n    {title}\n  </button>\n);\n\nconst TabPanel = ({ id, isSelected, children, tabIndex }) => (\n    <div\n      role=\"tabpanel\"\n      id={`tabpanel-${id}`}\n      aria-labelledby={`${id}`}\n      className={isSelected ? styles.tabPanel : \"\"}\n      hidden={!isSelected}\n      tabIndex={tabIndex}\n    >\n      {children}\n    </div>\n  );\n\nexport const AccordionTabComponent = ({\n  tabs,\n  tabPanelTabindex,\n  triggerActivation = \"automated\",\n  textColor = \"rgba(0, 0, 0, 1)\",\n  tabBackground = {\n    default: \"rgba(209, 203, 219, 1)\",\n    selected: \"rgba(156, 39, 176, 1)\",\n  },\n}) => {\n  const [selectedTab, setSelectedTab] = useState(tabs[0].id);\n  const [isAccordionView, setIsAccordionView] = useState(\n    window.innerWidth < 400\n  );\n\n  const handleWindowResize = () => {\n    setIsAccordionView(window.innerWidth < 400);\n  };\n\n  const windowResizeEvent = useRef(null);\n\n  useEffect(() => {\n    windowResizeEvent.current = handleWindowResize;\n    window.addEventListener(\"resize\", windowResizeEvent.current);\n\n    return () => {\n      window.removeEventListener(\"resize\", windowResizeEvent.current);\n    };\n  }, []);\n\n  const handleKeyDown = (id, event) => {\n    if (isAccordionView && (event.key === \"Enter\" || event.key === \" \")) {\n      event.preventDefault();\n      setSelectedTab(id);\n    } else if (!isAccordionView) {\n      const currentIndex = tabs.findIndex((tab) => tab.id === id);\n\n      // Remaining key event handling for Tab component\n\n      if (event.key === \"ArrowRight\") {\n        event.preventDefault();\n        const nextIndex = (currentIndex + 1) % tabs.length;\n        if (triggerActivation === \"automated\") {\n          setSelectedTab(tabs[nextIndex].id);\n        }\n        document.getElementById(tabs[nextIndex].id).focus();\n      } else if (event.key === \"ArrowLeft\") {\n        event.preventDefault();\n        const prevIndex = (currentIndex - 1 + tabs.length) % tabs.length;\n        if (triggerActivation === \"automated\") {\n          setSelectedTab(tabs[prevIndex].id);\n        }\n        document.getElementById(tabs[prevIndex].id).focus();\n      } else if (event.key === \"Home\") {\n        event.preventDefault();\n        if (triggerActivation === \"automated\") {\n          setSelectedTab(tabs[0].id);\n        }\n        document.getElementById(tabs[0].id).focus();\n      } else if (event.key === \"End\") {\n        event.preventDefault();\n        if (triggerActivation === \"automated\") {\n          setSelectedTab(tabs[tabs.length - 1].id);\n        }\n        document.getElementById(tabs[tabs.length - 1].id).focus();\n      } else if (\n        (event.key === \"Enter\" || event.key === \" \") &&\n        triggerActivation === \"manual\"\n      ) {\n        event.preventDefault();\n        setSelectedTab(id);\n      }\n    }\n  };\n\n  return (\n    <div className={styles.tabContainer}>\n      {isAccordionView ? (\n        tabs.map(({ id, title, content }) => (\n          <div key={id}>\n            <AccordionButton\n              id={id}\n              title={title}\n              isSelected={selectedTab === id}\n              onClick={() => setSelectedTab(id)}\n              onKeyDown={handleKeyDown}\n              textColor={textColor}\n              tabBackground={tabBackground}\n            />\n            <AccordionPanel key={id} id={id} isSelected={selectedTab === id}>\n              {content}\n            </AccordionPanel>\n          </div>\n        ))\n      ) : (\n        <>\n          <div\n            role=\"tablist\"\n            aria-label=\"HTML and ARIA information\"\n            className={styles.tabList}\n          >\n            {tabs.map(({ id, title }) => (\n              <Tab\n                key={id}\n                id={id}\n                title={title}\n                isSelected={selectedTab === id}\n                onClick={() => setSelectedTab(id)}\n                onKeyDown={handleKeyDown}\n                textColor={textColor}\n                tabBackground={tabBackground}\n              />\n            ))}\n          </div>\n          {tabs.map(({ id, content }) => (\n            <TabPanel\n              key={id}\n              id={id}\n              isSelected={selectedTab === id}\n              tabIndex={tabPanelTabindex ? 0 : undefined}\n            >\n              {content}\n            </TabPanel>\n          ))}\n        </>\n      )}\n    </div>\n  );\n};"],"names":[],"sourceRoot":""}