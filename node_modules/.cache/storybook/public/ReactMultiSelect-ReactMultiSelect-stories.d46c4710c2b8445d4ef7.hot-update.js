"use strict";
self["webpackHotUpdatetable_header_with_sub_header"]("ReactMultiSelect-ReactMultiSelect-stories",{

/***/ "./stories/ReactMultiSelect/keyboardNavigation.js":
/*!********************************************************!*\
  !*** ./stories/ReactMultiSelect/keyboardNavigation.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);

const useKeyboardNavigation = (isListboxOpen, listboxRef, handleSelectOption, selectionModel) => {
  const [focusedOptionIndex, setFocusedOptionIndex] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (isListboxOpen) {
      listboxRef.current.focus();
    }
  }, [isListboxOpen, listboxRef]);
  const handleKeyDown = event => {
    const {
      key
    } = event;
    const options = Array.from(listboxRef.current.children);
    let newIndex;
    switch (key) {
      case 'ArrowUp':
        event.preventDefault();
        newIndex = focusedOptionIndex - 1 >= 0 ? focusedOptionIndex - 1 : options.length - 1;
        options[newIndex].focus();
        setFocusedOptionIndex(newIndex);
        break;
      case 'ArrowDown':
        event.preventDefault();
        newIndex = focusedOptionIndex + 1 < options.length ? focusedOptionIndex + 1 : 0;
        options[newIndex].focus();
        setFocusedOptionIndex(newIndex);
        break;
      case 'Home':
        event.preventDefault();
        options[0].focus();
        setFocusedOptionIndex(0);
        break;
      case 'End':
        event.preventDefault();
        options[options.length - 1].focus();
        setFocusedOptionIndex(options.length - 1);
        break;
      case ' ':
      case 'Enter':
        event.preventDefault();
        handleSelectOption(options[focusedOptionIndex].textContent);
        break;
      default:
        break;
    }
  };
  return handleKeyDown;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useKeyboardNavigation);

/***/ })

});
//# sourceMappingURL=ReactMultiSelect-ReactMultiSelect-stories.d46c4710c2b8445d4ef7.hot-update.js.map