{"version":3,"file":"ReactCombobox-ReactCombobox-stories.2874c4bc7dc8a9b0cdf1.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AAEA;AAGA;AAAA;AAAA;AAAA;AAAA;AAGA;AA7EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+EA","sources":["webpack://table---header-with-sub-header/./stories/ReactCombobox/ReactCombobox.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport ariaAnnounce from '../../.storybook/utils/ariaAnnounce';\nimport { townsAndCities } from './ReactComboboxData';\nimport styles from './ReactCombobox.module.css';\n\nconst ReactCombobox = ({ autocomplete = 'list' }) => {\n  const [inputValue, setInputValue] = useState('');\n  const [selectedIndex, setSelectedIndex] = useState(-1);\n  const [showOptions, setShowOptions] = useState(false);\n  const [options, setOptions] = useState(townsAndCities);\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    if (autocomplete === 'list') {\n      setOptions(townsAndCities.filter(city => city.toLowerCase().includes(inputValue.toLowerCase())));\n    }\n  }, [inputValue, autocomplete]);\n\n  const handleInputChange = (event) => {\n    setInputValue(event.target.value);\n    if (autocomplete === 'list') {\n      setShowOptions(true);\n    }\n  };\n\n  const handleOptionClick = (value) => {\n    setInputValue(value);\n    setShowOptions(false);\n    setSelectedIndex(-1);\n    ariaAnnounce(`Selected ${value}`);\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === \"ArrowDown\" && selectedIndex < options.length - 1) {\n      setSelectedIndex(selectedIndex + 1);\n      setInputValue(options[selectedIndex + 1]);\n    } else if (e.key === \"ArrowUp\" && selectedIndex > 0) {\n      setSelectedIndex(selectedIndex - 1);\n      setInputValue(options[selectedIndex - 1]);\n    } else if (e.key === \"Enter\") {\n      setShowOptions(false);\n    }\n  };\n\n  return (\n    <div className={styles['combobox-container']}>\n      <label id=\"combobox-label\" htmlFor=\"combobox-input\">Your City or Town</label>\n      <input\n        id=\"combobox-input\"\n        className={styles['combobox-input']}\n        role=\"combobox\"\n        aria-autocomplete={autocomplete}\n        autocomplete=\"off\"\n        aria-controls=\"combobox-listbox\"\n        aria-activedescendant={selectedIndex === -1 ? '' : `option-${selectedIndex}`}\n        aria-expanded={showOptions}\n        aria-labelledby=\"combobox-label\"\n        ref={inputRef}\n        type=\"text\"\n        value={inputValue}\n        onChange={handleInputChange}\n        onKeyDown={handleKeyPress}\n      />\n      {showOptions && (\n        <ul id=\"combobox-listbox\" className={styles['combobox-listbox']} role=\"listbox\">\n          {options.map((option, index) => (\n            <li\n              id={`option-${index}`}\n              className={index === selectedIndex ? styles['selected-option'] : ''}\n              key={option}\n              role=\"option\"\n              aria-selected={index === selectedIndex}\n              onClick={() => handleOptionClick(option)}\n            >\n              {option}\n            </li>\n          ))}\n        </ul>\n      )}\n      <p id=\"help-text\" className={styles['help-text']}>Add instruction here</p>\n    </div>\n  );  \n};\n\nexport default ReactCombobox;"],"names":[],"sourceRoot":""}