{"version":3,"file":"ReactTabComponent-TabComponent-stories.8ebe9b16583415e59716.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAdA;AAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AARA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AAEA;AAGA;AA7EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://table---header-with-sub-header/./stories/ReactTabComponent/TabComponent.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport styles from \"./TabComponent.module.css\";\n\nconst Tab = ({ id, title, isSelected, onClick, onKeyDown, textColor, tabBackground }) => (\n  <button\n    role=\"tab\"\n    id={id}\n    aria-controls={`${id}-tabpanel`}\n    aria-selected={isSelected}\n    onClick={() => onClick(id)}\n    onKeyDown={(event) => onKeyDown(id, event)}\n    tabIndex={isSelected ? 0 : -1}\n    style={{\n      color: textColor,\n      backgroundColor: isSelected ? tabBackground.selected : tabBackground.default,\n    }}\n  >\n    {title}\n  </button>\n);\n\nconst TabPanel = ({ id, isSelected, children, tabIndex }) => (\n  <div\n    role=\"tabpanel\"\n    id={`tabpanel-${id}`}\n    aria-labelledby={`tab-${id}`}\n    hidden={!isSelected}\n    tabIndex={tabIndex}\n  >\n    {children}\n  </div>\n);\n\nexport const TabComponent = ({\n  tabPanelTabindex,\n  triggerActivation = \"automated\",\n  textColor = \"rgba(0, 0, 0, 1)\",\n  tabBackground = {\n    default: \"rgba(209, 203, 219, 1)\",\n    selected: \"rgba(156, 39, 176, 1)\",\n  },\n}) => {\n  const [selectedTab, setSelectedTab] = useState(tabs[0].id);\n\n  const handleKeyDown = (id, event) => {\n    const currentIndex = tabs.findIndex((tab) => tab.id === id);\n    \n        if (event.key === \"ArrowRight\") {\n          event.preventDefault();\n          const nextIndex = (currentIndex + 1) % tabs.length;\n          if (triggerActivation === \"automated\") {\n            setSelectedTab(tabs[nextIndex].id);\n          }\n          document.getElementById(tabs[nextIndex].id).focus();\n        } else if (event.key === \"ArrowLeft\") {\n          event.preventDefault();\n          const prevIndex = (currentIndex - 1 + tabs.length) % tabs.length;\n          if (triggerActivation === \"automated\") {\n            setSelectedTab(tabs[prevIndex].id);\n          }\n          document.getElementById(tabs[prevIndex].id).focus();\n        } else if (event.key === \"Home\") {\n          event.preventDefault();\n          if (triggerActivation === \"automated\") {\n            setSelectedTab(tabs[0].id);\n          }\n          document.getElementById(tabs[0].id).focus();\n        } else if (event.key === \"End\") {\n          event.preventDefault();\n          if (triggerActivation === \"automated\") {\n            setSelectedTab(tabs[tabs.length - 1].id);\n          }\n          document.getElementById(tabs[tabs.length - 1].id).focus();\n        } else if (\n          (event.key === \"Enter\" || event.key === \" \") &&\n          triggerActivation === \"manual\"\n        ) {\n          event.preventDefault();\n          setSelectedTab(id);\n        }\n      };\n\n  return (\n    <div className={styles.tabContainer}>\n    <div role=\"tablist\" aria-label=\"HTML and ARIA information\" className={styles.tabList}>\n        {tabs.map(({ id, title }) => (\n          <Tab\n            key={id}\n            id={id}\n            title={title}\n            isSelected={selectedTab === id}\n            onClick={() => setSelectedTab(id)}\n            onKeyDown={handleKeyDown}\n            textColor={textColor}\n            tabBackground={tabBackground}\n          />\n        ))}\n      </div>\n      {tabs.map(({ id, content }) => (\n        <TabPanel\n          key={id}\n          id={id}\n          isSelected={selectedTab === id}\n          tabIndex={tabPanelTabindex ? 0 : undefined}\n        >\n          {content}\n        </TabPanel>\n      ))}\n    </div>\n  );\n};"],"names":[],"sourceRoot":""}