{"version":3,"file":"ReactMultiSelect-ReactMultiSelect-stories-mdx.a89a4bf02269d077721d.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://table---header-with-sub-header/./stories/ReactMultiSelect/ReactMultiSelect.stories.mdx"],"sourcesContent":["\nimport React from 'react';\n\nimport { useMDXComponents as _provideComponents } from \"@storybook/addon-docs/mdx-react-shim\";\nimport { Meta } from '@storybook/addon-docs/blocks';\nimport ReactMultiSelect from '../ReactMultiSelect/ReactMultiSelect';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction MDXContent(props = {}) {\n  const {\n    wrapper: MDXLayout\n  } = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? /*#__PURE__*/_jsx(MDXLayout, { ...props,\n    children: /*#__PURE__*/_jsx(_createMdxContent, {})\n  }) : _createMdxContent();\n\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h1: \"h1\",\n      p: \"p\",\n      h2: \"h2\",\n      code: \"code\",\n      ul: \"ul\",\n      li: \"li\"\n    }, _provideComponents(), props.components),\n          {\n      PropsTable\n    } = _components;\n\n    if (!PropsTable) _missingMdxReference(\"PropsTable\", true, \"12:1-12:37\");\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(Meta, {\n        title: \"Components/ReactMultiSelect\",\n        component: ReactMultiSelect\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h1, {\n        id: \"reactmultiselect\",\n        children: \"ReactMultiSelect\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n        children: \"This is a custom multi-select component that allows users to select multiple options from a list. It provides functionality for selecting and removing options, as well as keyboard navigation.\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h2, {\n        id: \"props\",\n        children: \"Props\"\n      }), \"\\n\", /*#__PURE__*/_jsx(PropsTable, {\n        of: ReactMultiSelect\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h2, {\n        id: \"behavior\",\n        children: \"Behavior\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n        children: \"The component renders a list of selected options and a button to toggle the visibility of the options list. Clicking on a selected option's remove button removes the option from the selection. Clicking on the toggle button opens or closes the options list.\"\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n        children: [\"The options list is only rendered when the \", /*#__PURE__*/_jsx(_components.code, {\n          children: \"isListboxOpen\"\n        }), \" state is \", /*#__PURE__*/_jsx(_components.code, {\n          children: \"true\"\n        }), \". It is rendered as an unordered list (\", /*#__PURE__*/_jsx(_components.code, {\n          children: \"ul\"\n        }), \") with list items (\", /*#__PURE__*/_jsx(_components.code, {\n          children: \"li\"\n        }), \") representing each option. The selected options are rendered as buttons, and each button has an associated remove button.\"]\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n        children: \"The options list and selected options have appropriate ARIA attributes for accessibility. The options list can be navigated using the keyboard. The number of selected items is announced using an ARIA live region.\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h2, {\n        id: \"controls\",\n        children: \"Controls\"\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.ul, {\n        children: [\"\\n\", /*#__PURE__*/_jsx(_components.li, {\n          children: \"Toggle Button: Clicking this button toggles the visibility of the options list.\"\n        }), \"\\n\"]\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h2, {\n        id: \"aria-announce\",\n        children: \"ARIA Announce\"\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n        children: [\"The \", /*#__PURE__*/_jsx(_components.code, {\n          children: \"ariaAnnounce\"\n        }), \" function is used to announce the number of selected items. It creates a temporary hidden \", /*#__PURE__*/_jsx(_components.code, {\n          children: \"div\"\n        }), \" element with ARIA attributes, sets the message as its inner text, and appends it to the document body. After a delay of 7 seconds, the \", /*#__PURE__*/_jsx(_components.code, {\n          children: \"div\"\n        }), \" element is removed from the document.\"]\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.h2, {\n        id: \"keyboard-interaction\",\n        children: \"Keyboard Interaction\"\n      }), \"\\n\", /*#__PURE__*/_jsx(_components.p, {\n        children: \"The component supports the following keyboard interactions when the options list is open:\"\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.ul, {\n        children: [\"\\n\", /*#__PURE__*/_jsx(_components.li, {\n          children: \"Arrow Up: Moves focus to the previous option in the list.\"\n        }), \"\\n\", /*#__PURE__*/_jsx(_components.li, {\n          children: \"Arrow Down: Moves focus to the next option in the list.\"\n        }), \"\\n\", /*#__PURE__*/_jsx(_components.li, {\n          children: \"Home: Moves focus to the first option in the list.\"\n        }), \"\\n\", /*#__PURE__*/_jsx(_components.li, {\n          children: \"End: Moves focus to the last option in the list.\"\n        }), \"\\n\", /*#__PURE__*/_jsx(_components.li, {\n          children: \"Space or Enter: Selects the currently focused option.\"\n        }), \"\\n\"]\n      }), \"\\n\", /*#__PURE__*/_jsxs(_components.p, {\n        children: [\"The \", /*#__PURE__*/_jsx(_components.code, {\n          children: \"useKeyboardNavigation\"\n        }), \" hook handles the keyboard navigation logic. It takes care of setting focus on the listbox when it opens and maintains the index of the currently focused option.\"]\n      })]\n    });\n  }\n}\n\nfunction _missingMdxReference(id, component, place) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\" + (place ? \"\\nItâ€™s referenced in your code at `\" + place + \"`\" : \"\"));\n}\n/* ========= */\n\n\nexport const __page = () => {\n  throw new Error(\"Docs-only story\");\n};\n__page.parameters = {\n  docsOnly: true\n};\nconst componentMeta = {\n  title: 'Components/ReactMultiSelect',\n  component: ReactMultiSelect,\n  tags: ['stories-mdx'],\n  includeStories: [\"__page\"]\n};\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = { ...(componentMeta.parameters.docs || {}),\n  page: MDXContent\n};\nexport default componentMeta;"],"names":[],"sourceRoot":""}