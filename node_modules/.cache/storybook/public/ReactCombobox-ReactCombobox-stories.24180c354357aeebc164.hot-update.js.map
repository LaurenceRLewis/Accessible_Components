{"version":3,"file":"ReactCombobox-ReactCombobox-stories.24180c354357aeebc164.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AAIA;AACA;AAIA;AACA;AACA;AAAA;AAEA;AAEA;AAGA;AAAA;AAAA;AAEA;AAAA;AAGA;AAnGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqGA","sources":["webpack://table---header-with-sub-header/./stories/ReactCombobox/ReactCombobox.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport ariaAnnounce from \"../../.storybook/utils/ariaAnnounce\";\nimport { townsAndCities } from \"./ReactComboboxData\";\nimport styles from \"./ReactCombobox.module.css\";\n\nconst ReactCombobox = ({ autocomplete = \"list\" }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n  const [selectedIndex, setSelectedIndex] = useState(-1);\n  const [showOptions, setShowOptions] = useState(false);\n  const [options, setOptions] = useState(townsAndCities);\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    if (autocomplete === \"list\" || autocomplete === \"both\") {\n      setOptions(\n        townsAndCities.filter((city) =>\n          city.toLowerCase().startsWith(inputValue.toLowerCase())\n        )\n      );\n    }\n  }, [inputValue, autocomplete]);\n\n  const handleOptionClick = (value) => {\n    setInputValue(value);\n    setShowOptions(false);\n    setSelectedIndex(-1);\n    ariaAnnounce(`Selected ${value}`);\n  };\n\n  const handleInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n    setOptions(townsAndCities.filter(city => city.toLowerCase().startsWith(value.toLowerCase())));\n    setShowOptions(true);\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === \"ArrowDown\" && selectedIndex < options.length - 1) {\n      setSelectedIndex(selectedIndex + 1);\n    } else if (e.key === \"ArrowUp\" && selectedIndex > 0) {\n      setSelectedIndex(selectedIndex - 1);\n    } else if (e.key === \"Enter\" && selectedIndex !== -1) {\n      setInputValue(options[selectedIndex]);\n      setSelectedIndex(-1);\n      setShowOptions(false);\n    } else if (e.key === \"Escape\") {\n      if (showOptions) {\n        setShowOptions(false);\n      } else {\n        setInputValue('');\n      }\n    }\n  };\n\n  return (\n    <div className={styles[\"comboboxContainer\"]}>\n      <label id=\"combobox-label\" htmlFor=\"combobox-input\">\n        Your City or Town\n      </label>\n      <input\n        id=\"combobox-input\"\n        className={styles[\"comboboxInput\"]}\n        role=\"combobox\"\n        aria-autocomplete={autocomplete}\n        autocomplete=\"off\"\n        aria-controls=\"combobox-listbox\"\n        aria-activedescendant={\n          selectedIndex === -1 ? \"\" : `option-${selectedIndex}`\n        }\n        aria-expanded={showOptions}\n        aria-labelledby=\"combobox-label\"\n        ref={inputRef}\n        type=\"text\"\n        value={inputValue}\n        onChange={handleInputChange}\n        onKeyDown={handleKeyPress}\n      />\n      {showOptions && (\n        <ul\n          id=\"combobox-listbox\"\n          className={styles[\"comboboxListbox\"]}\n          role=\"listbox\"\n        >\n          {options.map((option, index) => (\n            <li\n              id={`option-${index}`}\n              className={\n                index === selectedIndex ? styles[\"selectedOption\"] : \"\"\n              }\n              key={option}\n              role=\"option\"\n              aria-selected={index === selectedIndex}\n              onClick={() => handleOptionClick(option)}\n            >\n              {option}\n            </li>\n          ))}\n        </ul>\n      )}\n      <p id=\"help-text\" className={styles[\"helpText\"]}>\n        Add instruction here\n      </p>\n    </div>\n  );\n};\n\nexport default ReactCombobox;\n"],"names":[],"sourceRoot":""}