{"version":3,"file":"ReactMulti-Select-Checkboxes-ReactMulti-Select-Checkboxes-stories.bb5dfd08a027d7bbbee1.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AAGA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAEA;AAGA;AAhGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkGA","sources":["webpack://table---header-with-sub-header/./stories/ReactMulti-Select-Checkboxes/ReactMulti-Select-Checkboxes.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport styles from \"./ReactMulti-Select-Checkboxes.module.css\";\nimport ariaAnnounce from \"./ariaAnnounce\";\nimport handleKeyboardNavigation from \"./keyboardNavigation\";\n\nconst ReactMultiSelectCheckboxes = ({ selectionModel }) => {\n  const isAlternativeSelectionModel = selectionModel === \"alternative\";\n  const [expanded, setExpanded] = useState(false);\n  const [checkCount, setCheckCount] = useState(0);\n  const catBreedGroup = useRef(null);\n  const checkboxesRef = useRef([]);\n  const totalCheckboxes = 3;\n\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (\n        catBreedGroup.current &&\n        !catBreedGroup.current.contains(event.target)\n      ) {\n        setExpanded(false);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, []);\n\n  useEffect(() => {\n    checkboxesRef.current.forEach((checkbox) =>\n      checkbox.addEventListener(\"keydown\", onKeyDown)\n    );\n\n    return () => {\n      checkboxesRef.current.forEach((checkbox) =>\n        checkbox.removeEventListener(\"keydown\", onKeyDown)\n      );\n    };\n  }, []);\n\n  const toggleDisclosure = () => {\n    setExpanded(!expanded);\n  };\n\n  const updateCheckCount = (event) => {\n    const targetCheckbox = event.target;\n    const isChecked = targetCheckbox.checked;\n\n    if (isAlternativeSelectionModel) {\n      checkboxesRef.current.forEach((checkbox) => {\n        if (checkbox !== targetCheckbox) {\n          checkbox.checked = false;\n        }\n      });\n      targetCheckbox.checked = !isChecked;\n      setCheckCount(!isChecked ? 1 : 0);\n    } else {\n      const newCheckCount = isChecked ? checkCount + 1 : checkCount - 1;\n      setCheckCount(newCheckCount);\n    }\n    ariaAnnounce(`${checkCount} of ${totalCheckboxes} checkboxes checked`);\n  };\n\n  const onKeyDown = (event) => {\n    handleKeyboardNavigation(\n      event,\n      checkboxesRef.current,\n      updateCheckCount,\n      isAlternativeSelectionModel\n    );\n  };\n\n  return (\n    <div className={styles.container} ref={catBreedGroup}>\n      <button\n        type=\"button\"\n        aria-expanded={expanded}\n        onClick={toggleDisclosure}\n      >\n        {`Cat Breeds (${checkCount} selected)`}\n      </button>\n      {expanded && (\n        <ul className={styles.checkboxesList}>\n          {[\"Bengal\", \"Siamese\", \"Persian\"].map((breed, index) => (\n            <li key={breed}>\n              <input\n                type=\"checkbox\"\n                name=\"catBreed\"\n                id={`catBreed${index + 1}`}\n                value={breed}\n                onChange={updateCheckCount}\n                ref={(el) => (checkboxesRef.current[index] = el)}\n              />\n              <label htmlFor={`catBreed${index + 1}`}>{breed}</label>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default ReactMultiSelectCheckboxes;"],"names":[],"sourceRoot":""}